------
--- Module: Prelude
--- Description: Common functions for Granule programs
--- Authors: Dominic Orchard, Vilem-Benjamin Liepelt
--- License: BSD3
--- Copyright: (c) Authors 2018
--- Issue-tracking: https://github.com/dorchard/granule/issues
--- Repository: https://github.com/dorchard/granule
------

import Bool

--- # Standard functional components

--- Identitiy function
id : forall a : Type . a -> a
id x = x

--- Flip the order of parameters
flip : forall a : Type, b : Type, c : Type . (a -> b -> c) -> b -> a -> c
flip f x y = f y x

--- Constant combinator
--- NB: Throws away its second argument and returns the first
const : forall a : Type, b : Type . a -> b [0] -> a
const x [y] = x

--- linear function composition (the composition operator `g ∘ f` resolves
--- to whatever is bound to `compose`)
compose : forall a : Type, b : Type, c : Type
  . (b -> c) -> (a -> b) -> (a -> c)
compose g f = \x -> g (f x)

--- Apply f to x until p holds
until : forall a : Type
      . (a -> Bool) [∞] -> (a -> a) [∞] -> a [∞] -> a
until [p] [f] [x] =
  case p x of
    False -> x;
    True  -> until [p] [f] [f x]

--- Standard fixed point
fix : forall {a : Type} . (a -> a) [∞] -> a
fix [f] = f (fix [f])

--- Specialised first-order fixed point
fixF : forall {a : Type, b : Type}
     . ((a -> b) [∞] -> (a -> b)) [∞] -> (a -> b)
fixF [f] = f [fixF [f]]

--- Conditional on integers
--- Returns `x` if `g` is zero, else returns `y`
if0 : forall a : Type . Int [0..1] -> a [0..1] -> a [0..1] -> a
if0 g [x] [y] =
    case g of
      [0] -> x;
      [_] -> y


--- # Numeric functions and constants

-- Given some n, return
-- + 1 iff n is positive
-- + -1 iff n is negative
-- + 0 otherwise
sign : Int [1..2] -> Int
sign [x] = if x > 0 then 1 else if x < 0 then -1 else 0

--- An approximation of pi
pi : Float
pi = 3.141592653589793

-- An approximation of Euler's number
e : Float
e = 2.718281828459045


--- # Combinators involving products (pairs)

--- Extract the left part of a pair
fst : forall a : Type, b : Type . a × b [0] -> a
fst (x, [_]) = x

--- Extract the right part of a pair
snd : forall a : Type, b : Type . a [0] × b -> b
snd ([_], y) = y

--- curry converts an uncurried function to a curried function
curry : forall a : Type, b : Type, c : Type .
        (a × b -> c) -> a -> b -> c
curry f x y = f (x, y)

--- uncurry converts a curried function to a function on pairs
uncurry : forall a : Type, b : Type, c : Type .
          (a -> b -> c) -> (a × b -> c)
uncurry f (x, y) = f x y


--- # Coeffect-specifc combinators

--- Coeffectful composition
comp : forall {n : Nat, m : Nat, a : Type, b : Type, c : Type} .
       (b [n] -> c) -> (a [m] -> b) [n] -> a [m * n] -> c
comp g [f] = \[x] -> g [f [x]]

unbox : forall a : Type . a [1] -> a
unbox [x] = x

--- Coeffectful application
app : forall a : Type, b : Type, c : Nat . (a [c] -> b) -> a [c] -> b
app f x = f x

--- Flatten two boxes (with Nat grading)
flatten : forall {a : Type, n : Nat, m : Nat} . (a [n]) [m] -> a [n * m]
flatten [[x]] = [x]

--- Expand two boxes (with Nat grading)
unflatten : forall {a : Type, n : Nat, m : Nat} . a [n*m] -> (a [n]) [m]
unflatten [x] = [[x]]

--- Push coeffects on a pair into the left and right elements
push : forall {a : Type, b : Type, n : Nat} . (a × b) [n] -> a [n] × b [n]
push [(x, y)] = ([x], [y])

--- Pull coeffects of pair elements up to the pair
pull : forall {a : Type, b : Type, n : Nat} . a [n] × b [n] -> (a × b) [n]
pull ([x], [y]) = [(x, y)]
