-- Use vectors to implement stacks
import Vec

pop : forall {n : Nat, a : Type} . Vec (n+1) a -> (a, Vec n a)
pop = uncons

push : forall {n : Nat, a : Type} . a -> Vec n a -> Vec (n+1) a
push = Cons

peek : forall {n : Nat, a : Type} . (Vec (n+1) a) [1..2] -> (a, Vec (n+1) a)
peek [Cons x xs] = (x, Cons x xs)

peek' : forall {n : Nat, m : Ext Nat, a : Type}
       . Vec (n+1) (a [m..m+1]) -> (a, Vec (n+1) (a [m..m]))
peek' (Cons [x] xs) = (x, Cons [x] xs)

peek'' : forall {n : Nat, a : Type} . Vec (n+1) (a [1..2]) -> (a, Vec (n+1) a)
peek'' (Cons [x] xs) = (x, case pullVec xs of [xs'] -> Cons x xs')
