-- gr --no-eval

data Cake  where Cake  : Cake
data Happy where Happy : Happy

eat : Cake → Happy
eat Cake = Happy

have : Cake → Cake
have Cake = Cake

-- You cannot have your cake and eat it...

-- impossible : Cake → (Happy, Cake)
-- impossible cake = (eat cake, have cake)

-- ...unless you have infinite cake

possible : Cake [∞] → (Happy, Cake [∞])
possible lotsOfCake =
  let [cake] = lotsOfCake in (eat cake, [have cake])

-- ...or to there is a more precise way

accurate : ∀ {n : Nat} . Cake [n+1] → (Happy, Cake [n])
accurate lotsOfCake =
  let [cake] = lotsOfCake in (eat cake, [have cake])
