-- gr --no-eval

-- Church numerals have graded types that explain what they encode

zero : ∀ {a : Type} . (a → a) [0] → a → a
zero [f] x = x

one : ∀ {a : Type} . (a → a) [1] → a → a
one [f] x = f x

two : ∀ {a : Type} . (a → a) [2] → a → a
two [f] x = f (f x)

plus : ∀ {a : Type, n : Nat, m : Nat} .
         ((a → a) [m] → a → a)
      → ((a → a) [n] → a → a)
      → ((a → a) [m+n] → a → a)
plus m n [f] x = m [f] (n [f] x)

succ : ∀ {a : Type, n : Nat} .
         ((a → a) [n] → a → a)
      → ((a → a) [n+1] → a → a)
succ n [f] x = f (n [f] x)

mult : ∀ {a : Type, n : Nat, m : Nat} .
         ((a → a) [m] → a → a)
      → ((a → a) [n] → a → a) [m]
      → ((a → a) [n*m] → a → a)
mult m [n] [f] x = m [n [f]] x

-- Generalised version of Church numerals

zeroGen : ∀ {a : Type, r : Nat} . (a [r] → a) [0] → a → a
zeroGen [f] x = x

oneGen : ∀ {a : Type, r : Nat} . (a [r] → a) [1] → a [r] → a
oneGen [f] x = f x

twoGen : ∀ {a : Type, r : Nat} . (a [r] → a) [r+1] → a [r*r] → a
twoGen [f] [x] = f [f [x]]

threeGen : ∀ {a : Type, r : Nat} . (a [r] → a) [(r*r)+r+1] → a [r*r*r] → a
threeGen [f] [x] = f [f [f [x]]]

fourGen : ∀ {a : Type, r : Nat} . (a [r] → a) [(r*r*r)+(r*r)+r+1] → a [r*r*r*r] → a
fourGen [f] [x] = f [f [f [f [x]]]]

-- Booleans

true : ∀ {a : Type} . a [1] → a [0] → a
true [a] [b] = a

false : ∀ {a : Type} . a [0] → a [1] → a
false [a] [b] = b

-- Need arbitrary rank polymorphism for most binary operators!

not : ∀ {a : Type, n : Nat, m : Nat} .
      (a [m] → a [n] → a) → a [n] → a [m] → a
not p x y = p y x

xor : ∀ {a : Type, c : Type, n : Nat, m : Nat, p : Nat, q : Nat} .
         ((a [q] → a [p] → a) [n]
      →  (a [p] → a [q] → a) [m]
      →  c)
      → (a [p] → a [q] → a) [n+m]
      → c
xor a [b] = a [not b] [b]
