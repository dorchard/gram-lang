import Maybe

-- Don't get this kind of isomorphic
-- main : Maybe Int
-- main = reify (reflect (Some 4))

reflect : forall {a : Type} . Maybe a -> (() -> (Maybe a) <MayFail>)
reflect None     () = let [()] <- throw in pure None;
reflect (Some x) () = pure (Some x)

reify : forall {a : Type} . (() -> (a [0..1]) <MayFail>) -> Maybe a
reify f = fromPure (try f () as [x] in pure (Some x) catch pure (None))
