-- gr --no-eval

data Vec : Nat -> Type -> Type where
  Nil : forall {a : Type} . Vec 0 a;
  Cons : forall {a : Type, n : Nat} . a -> Vec n a -> Vec (n+1) a

headAlt : forall {a : Type, n : Nat} . {n > 0} => (Vec n a) [0..1] -> a
headAlt [Cons x _] = x

foo : forall {a : Type} . (Vec 1 a) [0..1] -> a
foo x = headAlt x
