-- gr --no-eval

dup : Int [2] → Int
dup [n] = n + n

dup' : Int → Int
dup' n = n * 2

twice : ∀ {c : Nat} . (Int [c] → Int) [2] → Int [2*c] → Int
twice [f] [n] = f [n] + f [n]

trip : Int [3] → Int
trip [x] = x + x + x

-- main : Int
-- main = twice [dup] [10] + twice [trip] [20]

secret : Int [Private]
secret = [4253]

hash : ∀ {l : Level} . Int [l] → Int [l]
hash [x] = [x*x]

notAleak : (Int [Private]) [0] → Int [Public]
notAleak [x] = [42]

-- main : Int [Private]
-- main = hash secret

doTwice : (Int <R>) [2] → Int <R, R>
doTwice [f] =
  let a ← f;
      b ← f
  in pure (a + b)

main : Int <R, R>
main = doTwice [readInt]
